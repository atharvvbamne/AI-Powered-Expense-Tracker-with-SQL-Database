üöÄ Connecting Python to SQL Database
Now that we have the SQL schema and sample data, let‚Äôs connect it to Python using SQLite (or PostgreSQL) and build a basic interface to interact with the database.

1Ô∏è‚É£ Install Required Libraries
First, install the necessary libraries:

bash
Copy
pip install sqlite3 pandas psycopg2 flask
sqlite3 ‚Üí For SQLite (built-in)
psycopg2 ‚Üí For PostgreSQL (if using Postgres)
pandas ‚Üí For data analysis
flask ‚Üí If you want to build an API later
2Ô∏è‚É£ Connect Python to SQLite Database
Here‚Äôs how to connect Python to an SQLite database and perform basic queries.

Database Connection (db_connector.py)
python
Copy
import sqlite3

# Connect to SQLite database
def connect_db():
    conn = sqlite3.connect("expense_tracker.db")
    return conn

# Create tables
def create_tables():
    conn = connect_db()
    cursor = conn.cursor()

    cursor.executescript("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS categories (
        category_id INTEGER PRIMARY KEY AUTOINCREMENT,
        category_name TEXT UNIQUE NOT NULL
    );

    CREATE TABLE IF NOT EXISTS expenses (
        expense_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        category_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        description TEXT,
        expense_date DATE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
        FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
    );
    """)

    conn.commit()
    conn.close()

if __name__ == "__main__":
    create_tables()
    print("Database and tables created successfully!")
3Ô∏è‚É£ Insert Sample Data into Database
Data Seeder (seed_db.py)
python
Copy
import sqlite3

def seed_data():
    conn = sqlite3.connect("expense_tracker.db")
    cursor = conn.cursor()

    # Insert sample users
    cursor.executemany("""
    INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)
    """, [
        ('john_doe', 'john@example.com', 'hashed_password_123'),
        ('jane_smith', 'jane@example.com', 'hashed_password_456'),
        ('alice_walker', 'alice@example.com', 'hashed_password_789'),
        ('bob_marley', 'bob@example.com', 'hashed_password_321')
    ])

    # Insert predefined categories
    cursor.executemany("""
    INSERT INTO categories (category_name) VALUES (?)
    """, [
        ('Food'), ('Transport'), ('Entertainment'), ('Shopping'), 
        ('Bills'), ('Healthcare'), ('Education'), ('Miscellaneous')
    ])

    # Insert sample expenses
    cursor.executemany("""
    INSERT INTO expenses (user_id, category_id, amount, description, expense_date) 
    VALUES (?, ?, ?, ?, ?)
    """, [
        (1, 1, 15.00, 'Lunch at a restaurant', '2024-02-10'),
        (1, 2, 4.50, 'Metro fare', '2024-02-12'),
        (2, 3, 30.00, 'Concert ticket', '2024-02-15'),
        (2, 5, 60.00, 'Electricity bill', '2024-02-18'),
        (3, 2, 5.00, 'Taxi fare', '2024-02-11'),
        (4, 1, 18.25, 'Dinner with friends', '2024-02-10')
    ])

    conn.commit()
    conn.close()

if __name__ == "__main__":
    seed_data()
    print("Sample data inserted successfully!")
4Ô∏è‚É£ Fetch and Display Data from Database
Query and Fetch Data (fetch_data.py)
python
Copy
import sqlite3
import pandas as pd

# Connect to the database
conn = sqlite3.connect("expense_tracker.db")

# Fetch all expenses
query = """
SELECT e.expense_id, u.username, c.category_name, e.amount, e.description, e.expense_date
FROM expenses e
JOIN users u ON e.user_id = u.user_id
JOIN categories c ON e.category_id = c.category_id
ORDER BY e.expense_date DESC;
"""

df = pd.read_sql_query(query, conn)
conn.close()

# Display the fetched data
import ace_tools as tools
tools.display_dataframe_to_user(name="Expense Data", dataframe=df)
Next Steps
1Ô∏è‚É£ Run the scripts in order:

bash
Copy
python db_connector.py  # Create database and tables
python seed_db.py       # Insert sample data
python fetch_data.py    # Fetch and display data
2Ô∏è‚É£ Enhance the project:

Add CRUD operations (Add/Edit/Delete expenses)
Implement user authentication
Build a Flask API for a frontend app
Would you like a Flask/FastAPI backend to interact with this database? üöÄ






